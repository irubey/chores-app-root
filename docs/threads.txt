# Thread System Overview

## Core Functionality
The thread system provides a centralized messaging platform where:
1. Users can view and participate in threads across multiple households
2. Each thread contains messages, polls, and attachments
3. Messages support reactions, mentions, and read status tracking
4. Real-time updates keep content synchronized

## Primary Views
1. Thread List (/threads)
   - Grid of thread cards showing latest activity
   - Available thread data per card:
     - Thread title and household name
     - Latest message preview
     - Unread message count
     - Author info (name, avatar)
     - Has poll/attachment indicators
     - Timestamp
     - Participant count
   - Quick household context switching
   
2. Thread Detail (Modal)
   - Full message history with infinite scroll
   - Per message data:
     - Content
     - Author details (name, avatar, role)
     - Timestamp
     - Read status
     - Attachments
     - Mentions
     - Reactions
     - Polls with:
       - Question
       - Options with votes
       - End date
       - Vote counts
   - Message composition with:
     - Text input
     - Attachment upload
     - Mention picker
     - Poll creator
   - Real-time updates

## Data Architecture
1. Thread Management
   - useThreads hook provides:
     - threads: Thread[]
     - isLoading: boolean
     - hasMore: boolean
     - loadMore: () => void
     - refresh: () => void
   
2. Message Handling
   - useThread hook provides:
     - messages: Message[]
     - participants: Participant[]
     - addMessage: (content: string) => void
     - addReaction: (messageId: string, reaction: string) => void
     - markAsRead: () => void
   - useMessageInteractions hook provides:
     - State:
       - reactions: ReactionWithUser[]
       - mentions: MentionWithUser[]
       - reads: MessageReadWithUser[]
       - isLoading: { reactions, mentions, reads }
       - error: Error | null
     
     - Actions:
       - toggleReaction(type: ReactionType, emoji: string): Promise<void>
       - optimisticToggleReaction(type: ReactionType, emoji: string): void
       - addMention(userId: string): Promise<void>
       - markAsRead(): Promise<void>
       - updateMessage(content: string): Promise<void>
       - deleteMessage(): Promise<void>
     
     - Queries:
       - hasReacted(type: ReactionType): boolean
       - isRead(): boolean
       - getReactionCount(type: ReactionType): number
   - usePoll provides:
     - createPoll: (options: PollOptions) => void
     - vote: (optionId: string) => void
     - closePoll: () => void

# Thread System Features & Components

## Core Features

### Thread List View (/threads)
Component: ThreadList.tsx
- Displays threads from multiple households
- Shows unread status and preview
- Handles thread selection
- Implements infinite scroll pagination

### Thread Card
Component: ThreadCard.tsx
- Thread title and household name
- Last message preview
- Unread message count
- Timestamp
- Thread status indicators (has polls, attachments)

### Thread Detail Modal
Components:
- MessageList.tsx: Main message display
- MessageInput.tsx: Message composition
- Poll/Poll.tsx: Poll display
- Poll/PollCreator.tsx: Poll creation
- Poll/PollOptions.tsx: Poll voting interface
- reactions/ReactionButton.tsx: Quick reactions
- reactions/ReactionPicker.tsx: Full reaction selector
- reactions/ReactionList.tsx: Shows all reactions

### Message Features
Component: Message.tsx
- Text content
- Attachments
- Mentions
- Timestamps
- Read status
- Reactions
- Poll integration

## Loading States
Components:
- skeletons/ThreadCardSkeleton.tsx: Thread list loading
- skeletons/MessageSkeleton.tsx: Message loading
- skeletons/PollSkeleton.tsx: Poll loading

## Interaction Patterns

### Message Interactions
- React to messages:
  - Optimistic updates for immediate feedback
  - Supports adding/removing reactions
  - Tracks reaction counts by type
  - Handles errors with automatic rollback
- Mention users:
  - Add @mentions to messages
  - Tracks mention status
- Message management:
  - Mark messages as read/unread
  - Edit message content
  - Delete messages
  - Track read status per user

### Thread Navigation
Component: ThreadHeader.tsx
- Back to thread list
- Thread title and info
- Thread context (household name)

## Data Management (Hooks)
- useThreads: Main thread listing and updates
- useThread: Single thread management
- useMessageInteractions: Reactions and read status
- usePoll: Poll creation and voting

## Optimistic Updates
- Message sending
- Reactions
- Poll votes
- Read status

## Real-time Features
- New message indicators
- Live reaction updates
- Poll results updates
- Read status sync

## Design Principles
- Mobile-first responsive design
- Instant feedback for all interactions
- Graceful degradation for offline/slow connections
- Dark mode support out of the box
- Keyboard navigation support
- Minimal UI with focus on content

## User Experience Goals
- Fast initial load (use skeletons)
- Smooth transitions between views
- Clear visual hierarchy
- Intuitive navigation
- Responsive feedback for actions
- Seamless multi-household context switching

## Accessibility Features
- ARIA labels for interactive elements
- Keyboard navigation support
- Screen reader friendly content structure
- Sufficient color contrast
- Focus management in modals
- Loading state announcements
- Error state announcements

## State Management
- Client-side cache for threads and messages
- Optimistic updates for all actions
- Real-time sync with backend
- Pagination state management
- Modal/UI state management
- Form state handling
- Error state management

## Error Handling
- Network error recovery
- Optimistic update rollbacks
- Rate limiting handling
- Validation error display
- Retry mechanisms
- Fallback UI states

## Performance Considerations
- Virtualized message lists
- Lazy loading of images/attachments
- Debounced real-time updates
- Cached API responses
- Preloaded critical resources
- Optimized bundle size

## Future Enhancements
- Thread search/filtering
- Rich text formatting
- File previews
- Thread pinning
- @mentions autocomplete
- Emoji picker
- Thread categories/labels
- Message threading/replies
- Export functionality
- Advanced poll features

## Common Components (frontend/src/components/common)

### Button
```tsx
interface ButtonProps {
  variant?: 'primary' | 'secondary' | 'accent' | 'outline';
  size?: 'sm' | 'md' | 'lg';
  isLoading?: boolean;
  disabled?: boolean;
  fullWidth?: boolean;
  icon?: React.ReactNode;
  children: React.ReactNode;
  onClick?: () => void;
}
```

### IconButton
```tsx
interface IconButtonProps {
  icon: React.ReactNode;
  label: string;
  variant?: 'primary' | 'secondary' | 'accent';
  size?: 'sm' | 'md' | 'lg';
  disabled?: boolean;
  onClick?: () => void;
}
```

### Modal
```tsx
interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  title?: string;
  size?: 'sm' | 'md' | 'lg' | 'xl' | 'full';
  children: React.ReactNode;
  footer?: React.ReactNode;
}
```

### Input
```tsx
interface InputProps {
  type?: 'text' | 'email' | 'password' | 'number';
  label?: string;
  error?: string;
  hint?: string;
  placeholder?: string;
  value: string;
  onChange: (value: string) => void;
  disabled?: boolean;
  required?: boolean;
}
```

### Badge
```tsx
interface BadgeProps {
  variant?: 'primary' | 'secondary' | 'accent';
  size?: 'sm' | 'md';
  children: React.ReactNode;
}
```

### Avatar
```tsx
interface AvatarProps {
  src?: string;
  alt: string;
  size?: 'xs' | 'sm' | 'md' | 'lg';
  fallback?: string;
}
```

### Dropdown
```tsx
interface DropdownProps {
  trigger: React.ReactNode;
  items: {
    label: string;
    onClick: () => void;
    icon?: React.ReactNode;
    disabled?: boolean;
  }[];
  placement?: 'top' | 'bottom' | 'left' | 'right';
}
```

### Tooltip
```tsx
interface TooltipProps {
  content: string;
  placement?: 'top' | 'bottom' | 'left' | 'right';
  children: React.ReactNode;
}
```

### Spinner
```tsx
interface SpinnerProps {
  size?: 'sm' | 'md' | 'lg';
  color?: 'primary' | 'secondary' | 'accent' | 'white';
}
```

### Card
```tsx
interface CardProps {
  children: React.ReactNode;
  padding?: 'none' | 'sm' | 'md' | 'lg';
  hover?: boolean;
  onClick?: () => void;
}
```

### Tabs
```tsx
interface TabsProps {
  tabs: {
    label: string;
    value: string;
    icon?: React.ReactNode;
  }[];
  value: string;
  onChange: (value: string) => void;
}
```

### Toast
```tsx
interface ToastProps {
  type?: 'success' | 'error' | 'warning' | 'info';
  title: string;
  message?: string;
  duration?: number;
  onClose: () => void;
}
```

### FormField
```tsx
interface FormFieldProps {
  label: string;
  error?: string;
  hint?: string;
  required?: boolean;
  children: React.ReactNode;
}
```

### EmptyState
```tsx
interface EmptyStateProps {
  title: string;
  description?: string;
  icon?: React.ReactNode;
  action?: React.ReactNode;
}
```

### ErrorBoundary
```tsx
interface ErrorBoundaryProps {
  fallback?: React.ReactNode;
  onError?: (error: Error) => void;
  children: React.ReactNode;
}
```

## Data Types

### Core Types
- Thread:
  - id: string
  - householdId: string
  - authorId: string
  - title?: string
  - author: User
  - household: Household
  - messages: Message[]
  - participants: HouseholdMember[]
  - createdAt: Date
  - updatedAt: Date
  - deletedAt?: Date

- Message:
  - id: string
  - threadId: string
  - authorId: string
  - content: string
  - author: User
  - attachments?: Attachment[]
  - reactions?: Reaction[]
  - mentions?: Mention[]
  - reads?: MessageRead[]
  - poll?: Poll
  - createdAt: Date
  - updatedAt: Date
  - deletedAt?: Date

### Interaction Types
- Reaction:
  - id: string
  - messageId: string
  - userId: string
  - emoji: string
  - type: ReactionType
  - user: User
  - createdAt: Date

- Mention:
  - id: string
  - messageId: string
  - userId: string
  - user: User
  - mentionedAt: Date

- MessageRead:
  - id: string
  - messageId: string
  - userId: string
  - user: User
  - readAt: Date

- Attachment:
  - id: string
  - messageId: string
  - url: string
  - fileType: string
  - createdAt: Date
  - updatedAt: Date
  - deletedAt?: Date

### Poll Types
- Poll:
  - id: string
  - messageId: string
  - question: string
  - pollType: PollType
  - maxChoices?: number
  - maxRank?: number
  - endDate?: Date
  - eventId?: string
  - status: PollStatus
  - selectedOptionId?: string
  - options: PollOption[]
  - createdAt: Date
  - updatedAt: Date

- PollOption:
  - id: string
  - pollId: string
  - text: string
  - order: number
  - startTime?: Date
  - endTime?: Date
  - votes: PollVote[]
  - voteCount: number
  - createdAt: Date
  - updatedAt: Date

- PollVote:
  - id: string
  - optionId: string
  - pollId: string
  - userId: string
  - user: User
  - rank?: number
  - availability?: boolean
  - createdAt: Date

### Enums
- PollType:
  - SINGLE_CHOICE
  - MULTIPLE_CHOICE
  - RANKED_CHOICE
  - EVENT_DATE

- PollStatus:
  - OPEN
  - CLOSED
  - CONFIRMED
  - CANCELLED

### Pagination
- PaginationOptions:
  - limit?: number
  - cursor?: string
  - direction?: "asc" | "desc"
  - sortBy?: string

- PaginationMeta:
  - hasMore: boolean
  - nextCursor?: string
  - total?: number

### User Types
- User:
  - id: string
  - email: string
  - name: string
  - profileImageURL?: string
  - createdAt: Date
  - updatedAt: Date
  - deletedAt?: Date

