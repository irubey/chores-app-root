datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum HouseholdRole {
  ADMIN
  MEMBER
}

enum DaysOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum EventStatus {
  PROPOSED
  SCHEDULED
  CANCELLED
  COMPLETED
}

enum EventCategory {
  CHORE
  MEETING
  SOCIAL
  OTHER
}

enum ChoreStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum SubtaskStatus {
  PENDING
  COMPLETED
}

enum TransactionStatus {
  PENDING
  COMPLETED
}

enum NotificationType {
  NEW_MESSAGE
  CHORE_ASSIGNED
  EXPENSE_UPDATED
  PAYMENT_REMINDER
  EVENT_REMINDER
  OTHER
}

enum Provider {
  GOOGLE
  FACEBOOK
  APPLE
}

enum EventReminderType {
  PUSH_NOTIFICATION
  EMAIL
  SMS
}

enum ChoreSwapRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum RecurrenceFrequency {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUADRENNIAL
  YEARLY
}

enum PollStatus {
  OPEN
  CLOSED
  CONFIRMED
  CANCELLED
}

enum PollType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  RANKED_CHOICE
  EVENT_DATE
}

enum ExpenseCategory {
  FOOD
  TRANSPORTATION
  HOUSING
  UTILITIES
  ENTERTAINMENT
  OTHER
}

enum ChoreAction {
  CREATED
  UPDATED
  COMPLETED
  ASSIGNED
  DELETED
  SWAPPED
  TEMPLATE_CREATED
  TEMPLATE_UPDATED
  TEMPLATE_DELETED
  RECURRENCE_CHANGED
}

enum ReactionType {
  LIKE
  LOVE
  HAHA
  WOW
  SAD
  ANGRY
}

enum ExpenseAction {
  CREATED
  UPDATED
  PAID
  SPLIT
  DELETED
  RECEIPT_UPLOADED
}

enum MessageAction {
  CREATED
  UPDATED
  DELETED
  REACTION_ADDED
  REACTION_REMOVED
  ATTACHMENT_ADDED
  ATTACHMENT_REMOVED
  MENTIONED
  POLL_CREATED
  POLL_VOTED
  POLL_ENDED
  POLL_CONFIRMED
  POLL_VOTE_REMOVED
  POLL_DELETED
}

enum CalendarEventAction {
  CREATED
  UPDATED
  DELETED
  STATUS_CHANGED
  RECURRENCE_CHANGED
}

//General Models

model User {
  id                           String              @id @default(uuid())
  email                        String              @unique
  passwordHash                 String?
  name                         String
  profileImageURL              String?
  createdAt                    DateTime            @default(now())
  updatedAt                    DateTime            @updatedAt
  deviceTokens                 String[]            @default([])
  deletedAt                    DateTime?
  activeHouseholdId            String?
  
  activeHousehold              Household?          @relation("ActiveHousehold", fields: [activeHouseholdId], references: [id])
  households                   HouseholdMember[]
  messages                     Message[]
  threads                      Thread[]
  assignedChores               ChoreAssignment[]
  expensesPaid                 Expense[]
  expenseSplits                ExpenseSplit[]
  transactionsFrom             Transaction[]       @relation("TransactionsFrom")
  transactionsTo               Transaction[]       @relation("TransactionsTo")
  notifications                Notification[]
  oauthIntegrations            OAuthIntegration[]
  eventsCreated                Event[]
  choreSwapRequestsInitiated   ChoreSwapRequest[]  @relation("InitiatedSwapRequests")
  choreSwapRequestsReceived    ChoreSwapRequest[]  @relation("ReceivedSwapRequests")
  reactions                    Reaction[]
  mentions                     Mention[]
  choreHistory                 ChoreHistory[]
  notificationSettings         NotificationSettings[]
  calendarEventHistory         CalendarEventHistory[]
  expenseHistory               ExpenseHistory[]
  messageReads                 MessageRead[]
  refreshTokens                RefreshToken[]
  pollVotes                    PollVote[]

  @@index([activeHouseholdId])
}

model Household {
  id          String            @id @default(uuid())
  name        String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  currency    String            @default("USD")
  icon        String?
  timezone    String            @default("UTC")
  language    String            @default("en")
  deletedAt   DateTime?

  activeUsers      User[]     @relation("ActiveHousehold")
  members     HouseholdMember[]
  threads     Thread[]
  chores      Chore[]
  expenses    Expense[]
  events      Event[]
  choreTemplates ChoreTemplate[]
  notificationSettings NotificationSettings[]
}



model HouseholdMember {
  id                   String        @id @default(uuid())
  userId               String
  householdId          String
  role                 HouseholdRole @default(MEMBER)
  joinedAt             DateTime      @default(now())
  leftAt               DateTime?
  isInvited            Boolean       @default(false)
  isAccepted           Boolean       @default(false)
  isRejected           Boolean       @default(false)
  nickname             String?

  user         User          @relation(fields: [userId], references: [id])
  household    Household     @relation(fields: [householdId], references: [id])
  threads      Thread[]      @relation("ThreadParticipants")

  @@unique([userId, householdId])
}

model RecurrenceRule {
  id                String              @id @default(uuid())
  frequency         RecurrenceFrequency
  interval          Int                 @default(1)
  byWeekDay         DaysOfWeek[]        @default([])
  byMonthDay        Int[]               @default([])
  bySetPos          Int?
  count             Int?
  until             DateTime?
  customRuleString  String?

  chores            Chore[]             @relation("ChoreRecurrence")
  events            Event[]             @relation("EventRecurrence")

  @@index([frequency, interval])
  @@index([until])
}

//Messaging Models
model Thread {
  id          String       @id @default(uuid())
  householdId String
  authorId    String
  title       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  household   Household    @relation(fields: [householdId], references: [id])
  author      User         @relation(fields: [authorId], references: [id])

  messages    Message[]
  participants HouseholdMember[] @relation("ThreadParticipants")
}

model Message {
  id        String      @id @default(uuid())
  threadId  String
  authorId  String
  content   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  deletedAt DateTime?

  thread    Thread      @relation(fields: [threadId], references: [id])
  author    User        @relation(fields: [authorId], references: [id])

  attachments Attachment[]
  reactions   Reaction[]
  mentions    Mention[]
  reads       MessageRead[]
  poll        Poll?       @relation("PollMessage")

  @@index([threadId, createdAt])
}

model Reaction {
  id        String    @id @default(uuid())
  messageId String
  userId    String
  emoji     String
  type      ReactionType
  createdAt DateTime  @default(now())

  message   Message   @relation(fields: [messageId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model Mention {
  id        String    @id @default(uuid())
  messageId String
  userId    String
  mentionedAt DateTime  @default(now())

  message   Message   @relation(fields: [messageId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@index([messageId])
  @@index([userId])
}

model Attachment {
  id        String    @id @default(uuid())
  messageId String
  url       String
  fileType  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  message   Message  @relation(fields: [messageId], references: [id])

  @@index([messageId])
}

model MessageRead {
  id        String    @id @default(uuid())
  messageId String
  userId    String
  readAt    DateTime  @default(now())

  message   Message   @relation(fields: [messageId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@unique([userId, messageId])
}


model Poll {
  id          String    @id @default(uuid())
  messageId   String    @unique
  question    String
  pollType    PollType  @default(SINGLE_CHOICE)
  maxChoices  Int?      // For MULTIPLE_CHOICE: max selections allowed
  maxRank     Int?      // For RANKED_CHOICE: how many options to rank
  endDate     DateTime?
  eventId     String?   @unique  // The final event that will be created
  status      PollStatus @default(OPEN)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  selectedOptionId String? // The winning option that was selected


  message     Message   @relation("PollMessage", fields: [messageId], references: [id])
  event       Event?    @relation("PollEvent", fields: [eventId], references: [id])
  options     PollOption[]
  selectedOption PollOption? @relation("PollSelectedOption", fields: [selectedOptionId], references: [id])
}

model PollOption {
  id          String    @id @default(uuid())
  pollId      String
  text        String
  order       Int
  // New fields for event date voting
  startTime   DateTime? // For event date options
  endTime     DateTime? // For event date options
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  poll        Poll      @relation(fields: [pollId], references: [id])
  votes       PollVote[]
  selectedForPolls Poll[] @relation("PollSelectedOption")
  

  @@index([pollId, order])
}

model PollVote {
  id          String    @id @default(uuid())
  optionId    String
  pollId      String
  userId      String
  rank        Int?      // Used for RANKED_CHOICE
  availability Boolean? // Used for EVENT_DATE type (true = available, false = unavailable)
  createdAt   DateTime  @default(now())

  option      PollOption @relation(fields: [optionId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@index([pollId])
  @@unique([userId, optionId])
  @@unique([userId, rank, pollId])
}

//Chores Models
model Chore {
  id                String            @id @default(uuid())
  householdId       String
  title             String
  description       String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  dueDate           DateTime?
  status            ChoreStatus       @default(PENDING)
  priority          Int?
  eventId           String?           @unique
  recurrenceRuleId  String?
  deletedAt         DateTime?


  household         Household         @relation(fields: [householdId], references: [id])
  subtasks          Subtask[]
  assignments       ChoreAssignment[]
  event             Event?            @relation("ChoreEvent", fields: [eventId], references: [id])
  choreSwapRequests ChoreSwapRequest[]
  recurrenceRule    RecurrenceRule?   @relation("ChoreRecurrence", fields: [recurrenceRuleId], references: [id], onDelete: Cascade)
  history           ChoreHistory[]

  @@index([householdId, status])
}

model Subtask {
  id        String        @id @default(uuid())
  choreId   String
  title     String
  description String?
  status    SubtaskStatus @default(PENDING)

  chore     Chore         @relation(fields: [choreId], references: [id])
}

model ChoreAssignment {
  id      String @id @default(uuid())
  choreId String
  userId  String
  assignedAt DateTime @default(now())
  completedAt DateTime?

  chore   Chore @relation(fields: [choreId], references: [id])
  user    User  @relation(fields: [userId], references: [id])

  @@unique([choreId, userId])
}

model ChoreSwapRequest {
  id               String                 @id @default(uuid())
  choreId          String
  requestingUserId String
  targetUserId     String
  status           ChoreSwapRequestStatus @default(PENDING)
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt

  requestingUser   User                   @relation("InitiatedSwapRequests", fields: [requestingUserId], references: [id])
  targetUser       User                   @relation("ReceivedSwapRequests", fields: [targetUserId], references: [id])
  chore            Chore                  @relation(fields: [choreId], references: [id])

  @@index([choreId])
  @@index([requestingUserId])
  @@index([targetUserId])
}

model ChoreTemplate {
  id          String    @id @default(uuid())
  householdId String
  title       String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  household   Household @relation(fields: [householdId], references: [id])
  subtasks    SubtaskTemplate[]
}

model SubtaskTemplate {
  id            String          @id @default(uuid())
  choreTemplateId String
  title         String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  choreTemplate ChoreTemplate @relation(fields: [choreTemplateId], references: [id])
}

model ChoreHistory {
  id          String     @id @default(uuid())
  choreId     String
  action      ChoreAction
  changedById String
  changedAt   DateTime  @default(now())


  chore     Chore    @relation(fields: [choreId], references: [id])
  user      User     @relation(fields: [changedById], references: [id])
}

//Finance Models
model Expense {
  id          String         @id @default(uuid())
  householdId String
  amount      Float
  description String
  paidById    String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  dueDate     DateTime?
  deletedAt   DateTime?
  category    ExpenseCategory

  household   Household      @relation(fields: [householdId], references: [id])
  paidBy      User           @relation(fields: [paidById], references: [id])
  splits      ExpenseSplit[]
  transactions Transaction[]
  receipts    Receipt[]
  history     ExpenseHistory[]

  @@index([householdId, category, createdAt])
}

model ExpenseSplit {
  id        String  @id @default(uuid())
  expenseId String
  userId    String
  amount    Float

  expense   Expense @relation(fields: [expenseId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([expenseId, userId])
}

model Transaction {
  id          String            @id @default(uuid())
  expenseId   String
  fromUserId  String
  toUserId    String
  amount      Float
  status      TransactionStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  deletedAt   DateTime?
  expense     Expense           @relation(fields: [expenseId], references: [id])
  fromUser    User              @relation("TransactionsFrom", fields: [fromUserId], references: [id])
  toUser      User              @relation("TransactionsTo", fields: [toUserId], references: [id])
}

model Receipt {
  id        String   @id @default(uuid())
  expenseId String
  url       String
  fileType  String
  createdAt DateTime @default(now())

  expense   Expense  @relation(fields: [expenseId], references: [id])
}

model ExpenseHistory {
  id        String   @id @default(uuid())
  expenseId String
  action    ExpenseAction
  changedById String
  changedAt   DateTime  @default(now())

  expense   Expense  @relation(fields: [expenseId], references: [id])
  user      User     @relation(fields: [changedById], references: [id])
}

//Calendar Models
model Event {
  id               String          @id @default(uuid())
  householdId      String
  title            String
  description      String?
  startTime        DateTime
  endTime          DateTime
  createdById      String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  choreId          String?         @unique
  recurrenceRuleId String?
  category         EventCategory   @default(OTHER)
  isAllDay         Boolean         @default(false)
  location         String?
  isPrivate        Boolean         @default(false)
  status           EventStatus     @default(PROPOSED)
  deletedAt        DateTime?
  
  reminders        EventReminder[]
  household        Household       @relation(fields: [householdId], references: [id])
  createdBy        User            @relation(fields: [createdById], references: [id])
  chore            Chore?          @relation("ChoreEvent")
  recurrenceRule   RecurrenceRule? @relation("EventRecurrence", fields: [recurrenceRuleId], references: [id])
  history          CalendarEventHistory[]
  poll             Poll?           @relation("PollEvent")
}

model EventReminder {
  id        String      @id @default(uuid())
  eventId   String
  time      DateTime
  type      EventReminderType
  event     Event       @relation(fields: [eventId], references: [id])
}

model CalendarEventHistory {
  id        String   @id @default(uuid())
  eventId String
  action    CalendarEventAction
  changedById String
  changedAt   DateTime  @default(now())

  event   Event  @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [changedById], references: [id])
}

//Notification Models
model Notification {
  id        String            @id @default(uuid())
  userId    String
  type      NotificationType
  message   String
  isRead    Boolean           @default(false)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  user      User              @relation(fields: [userId], references: [id])

  @@index([userId])
}

model NotificationSettings {
  id            String             @id @default(uuid())
  userId        String?
  householdId   String?
  messageNotif  Boolean            @default(true)
  mentionsNotif Boolean            @default(true)
  reactionsNotif Boolean            @default(true)
  choreNotif    Boolean            @default(true)
  financeNotif  Boolean            @default(true)
  calendarNotif Boolean           @default(true)
  remindersNotif Boolean           @default(true)


  user          User?               @relation(fields: [userId], references: [id])
  household     Household?          @relation(fields: [householdId], references: [id])
}


//Auth Models
model RefreshToken {
  id        String    @id @default(uuid())
  token     String    @unique
  userId    String
  revoked   Boolean   @default(false)
  createdAt DateTime  @default(now())
  expiresAt DateTime
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model OAuthIntegration {
  id           String    @id @default(uuid())
  userId       String
  provider     Provider
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?

  user         User      @relation(fields: [userId], references: [id])

  @@unique([userId, provider])
}